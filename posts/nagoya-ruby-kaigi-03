<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="generator" content="pandoc">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes">
  <meta name="author" content="Tomochika Hara">
  <title>thara</title>
  <link rel="stylesheet" href="https://thara.github.io/css/main.css">
</head>
<body>
  <header>
    <h1>
      <a href="https://thara.github.io">thara</a>
    </h1>
  </header>
  <div role="main">
    <div>
      <h1>名古屋Ruby会議03に行ってきた</h1>
        <span>2017-02-12</span>
    </div>
    <article>
<p><a href="http://regional.rubykaigi.org/nagoya03/">名古屋Ruby会議03</a> に行ってきた。<br>最初に謝っておかなければならない。</p>
<h1 id="-python-"><strong>僕は普段Pythonをメインに触っているフレンズです。</strong></h1>
<p>itamaeぐらいにしかRuby使ってない... が、それでも予想以上に楽しめた。<br>メモを取っていないので、まとまった文章で感想を述べることはできないが、各発表の感想を形に残しておきたい。<br>（LT &amp; パネルディスカッションはパス）</p>
<h3 id="ruby-rails-">Ruby/Railsはじめてチームの力をメキメキつけた！</h3>
<p>by 小芝 敏明さん</p>
<p>非常に身につまされる話であった。
だいたいはできている、と思う...</p>
<p>「テストの失敗をすぐ直す」あたりは、自分のチームでも割りと先延ばしになりがちなので気をつけたいところ。<br>「ペア作業」、おそらくペアプログラミングだけを指しているのではないと思う。<br>一人に任せるとベクトルが間違っているときに気づきづらいので、体制でカバーする仕組みがあるのは素晴らしい。   </p>
<h3 id="-github-pull-request-bot-framework">ぺろぺろ: Github pull request bot framework</h3>
<p>by mzpさん</p>
<p><a href="https://github.com/mzp/prpr">mzpぺろぺろ</a></p>
<p>自分のチームで使おうと思ってて、使えてなかったやつ。<br>trelloとgemfileプラグイン以外は、実際に使ってみたい。</p>
<h3 id="-apache-arrow-ruby-gobject-introspection-">招待講演 Apache ArrowのRubyバインディングをGObject Introspectionで</h3>
<p>by 須藤 功平さん</p>
<p>Pythonistaな自分からしたら、全部Pythonにしたらいいのではという印象を持ったが、GObject Introspectionの手軽さには驚いた。<br>Rroongaを使っていたが、Pyroongaではだめだったのだろうか。Cythonで書き直したいのだろうか...    </p>
<p>国産全文検索エンジンGroongaは触ったことはないが、自作WebサービスのElasticSearchはGroongaに置き換えるのも面白そうだ。<br>明日の<a href="https://misoca.doorkeeper.jp/events/56673">Groonga Meatup名古屋2017</a> には参加できそうにない。残念。</p>
<h3 id="mruby-jit">mrubyのJIT</h3>
<p>by 三浦 英樹さん</p>
<p>ここからmrubyのターンである。   </p>
<p>本業が水道屋さん、というのが驚き。実は自分も昔少し水道屋っぽいことをしていたことを思い出した。<br>恥ずかしながら、<a href="https://ja.wikipedia.org/wiki/%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%B3%E3%82%B0%E5%AE%9F%E8%A1%8C%E6%99%82%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB">Tracing JIT</a>を初めて知った。<br>LuaJITやPyPyのJITの実装がTracing JITとのこと。 勉強になりました。 </p>
<h3 id="dynamic-certificate-internals-with-ngx_mruby">Dynamic certificate internals with ngx_mruby</h3>
<p>by 奥村 晃弘さん</p>
<p>ペパボがmrubyをガンガン使っているの事実に驚いた。<br>最近話題に上がることが多いと思っていたら、まさかプロダクションに使われていたとは。<br>nginxの設定ファイルにmruby書けるのは楽しそうだ。 というかnginxの設定全体をmrubyで書きたい。   </p>
<h3 id="-haconiwa-mruby-">未来のサーバ基盤への Haconiwa/mruby の関わり - コンテナ仮想化のその先へ</h3>
<p>by 近藤 宇智朗さん</p>
<p><a href="https://speakerdeck.com/udzura/haconiwa-and-future-os">発表スライド</a></p>
<p>haconiwa、コンテナにフック入れられるのが面白い。<br>FastContainerは、Docker on Google App Engineのようなものを目指している、という印象。<br>mrubyで実装されているのは面白みある。   </p>
<h3 id="ruby-tensorflow-by-antimon2-">Ruby で TensorFlow by antimon2さん</h3>
<p>セグフォで落ちるのは辛い・・・
TensorFlow、どこかでチャレンジしなければ・・・</p>
<h3 id="fight-with-growing-data-on-rails">Fight with growing data on Rails</h3>
<p>by joker1007さん</p>
<p>おそらく自分の仕事上での問題領域に最も近い発表であったと思う。   </p>
<p>中規模以上のデータ分析を扱うならActive Recordは捨てろ、というのが印象的。<br>O/Rマッパーは、オブジェクトのCRUDには有効だが、複雑なSQLクエリには適応しないほうがよい、という点で自分も同意見である。<br>BigQueryはやはり偉大。<br>仕事ではAirflowを使っているが、中間データの生成には使っていない。もし必要となるとしたら、Python製のluigiも検討したい。<br>データのクレンジングにはEmbulk。タスクに冪等性を持たせる件は見習いたい。   </p>
<p>「Rubyに頼るところ、そうでないところを明確にする。アプリ基盤がRubyでも剥がせる余地を残しておく。自分が抱えている課題のステージを見極め、適切な道具を選ぶ。」<br>大事。</p>
<h3 id="-re-rinda">招待講演 re: rinda</h3>
<p>by 関 将俊さん</p>
<p>並列処理の協調言語Linda。そのRuby版のRinda。双方とも初めて聞いた。<br>とてもアイディアが面白い。 特にパターンマッチでwaitするところ。<br>n次元の内積問題という例はわかりやすかった。</p>
<h2 id="-">総評</h2>
<p>初めてRuby会議に参加したが、普段Rubyをガッツリ触っていない自分でも楽しめた。<br>Rubyコミュニティの良さがわかった気がする。自分も何かで貢献したい。</p>

    </article>
  </div>
  <footer>
  &copy; 2021 Tomochika Hara
  </footer>
</body>
</html>
